#cmake_minimum_required(VERSION 3.15)
cmake_minimum_required(VERSION 3.12)
project(Ball-Tracking-Prediction)

unset(CMAKE_C_FLAGS CACHE)
unset(CMAKE_CXX_FLAGS CACHE)
unset(CMAKE_CXX_FLAGS_RELEASE CACHE)

find_package(OpenMP)
if (OPENMP_FOUND)
    list(APPEND CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    list(APPEND CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

set(CMAKE_CXX_STANDARD 17)

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4819 /wd4244 /wd4805")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /W4 -DGTL_STATIC" CACHE STRING COMPILE_FLAGS FORCE)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /Ox /Ob2 /Oi /Ot /arch:AVX2 /fp:fast /DNDEBUG" CACHE STRING COMPILE_FLAGS FORCE)

	add_definitions(-D_USE_MATH_DEFINES -DNOMINMAX)
endif()

message ("CMAKE_BUILD_TYPE" ${CMAKE_BUILD_TYPE})
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
	message("Debug mode")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/Debug)
elseif(${CMAKE_BUILD_TYPE} MATCHES Release)
	message("Release mode")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/Release)
elseif(${CMAKE_BUILD_TYPE} MATCHES RelWithDebInfo)
	message("Release mode with debug info")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/RelWithDebInfo)
endif()

#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(LIBRARY_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

message("CMAKE_CURRENT_BINARY_DIR" ${CMAKE_CURRENT_BINARY_DIR}/bin)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/GUI)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/UI)

# Include settings file
include(CMakeListsSettings_$ENV{USERNAME}.txt OPTIONAL RESULT_VARIABLE LOCAL_PATH_SETTING_OK)
if(LOCAL_PATH_SETTING_OK)
    message("-- using local path overwriting settings of user $ENV{USERNAME}")
else(LOCAL_PATH_SETTING_OK)
    message("-- using default path settings. you can create your own CMakeListsSettings_USERNAME.txt")
    include(CMakeListsSettings_USER.txt)
endif()

message("CMAKE_CURRENT_SOURCE_DIR" ${CMAKE_CURRENT_SOURCE_DIR})
message("CMAKE_SOURCE_DIR" ${CMAKE_SOURCE_DIR})

# Packages
find_package(OpenCV REQUIRED)
find_package(Qt5 REQUIRED COMPONENTS Widgets Svg Xml Designer PrintSupport UiTools)

option(SILENT_WORK "Remove all imshow and waitKey functions?" OFF)
if (SILENT_WORK)
    add_definitions(-DSILENT_WORK)
endif(SILENT_WORK)

include(CheckIncludeFileCXX)
check_include_file_cxx(filesystem HAVE_FILESYSTEM)
if(HAVE_FILESYSTEM)
    add_definitions(-DHAVE_FILESYSTEM)
    message("Founded filesystem header")
else(HAVE_FILESYSTEM)
    message("Do not found filesystem header")
endif(HAVE_FILESYSTEM)

option(BUILD_CARS_COUNTING "Should compiled Cars counting example?" OFF)
if (BUILD_CARS_COUNTING)
    add_definitions(-DBUILD_CARS_COUNTING)
endif(BUILD_CARS_COUNTING)

add_subdirectory(thirdparty)
add_subdirectory(src)

if(${CMAKE_BUILD_TYPE} MATCHES Debug)
	set(DEBUG_POSTFIX "d")
endif()
		   
install(FILES "${CMAKE_SOURCE_DIR}/needed_dlls/Qt5Core${DEBUG_POSTFIX}.dll" DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
install(FILES "${CMAKE_SOURCE_DIR}/needed_dlls/Qt5Gui${DEBUG_POSTFIX}.dll" DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
install(FILES "${CMAKE_SOURCE_DIR}/needed_dlls/Qt5Widgets${DEBUG_POSTFIX}.dll" DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})